/**
 * Created by Chris on 31/12/16.
 */

'use strict';

import React, {Component, PropTypes,} from 'react';
import {View, Dimensions, StyleSheet, Text, TextInput, TouchableOpacity} from 'react-native';

import Ionicons from 'react-native-vector-icons/Ionicons';
import Entypo from 'react-native-vector-icons/Entypo';
import FontAwesome from 'react-native-vector-icons/FontAwesome';
import Foundation from 'react-native-vector-icons/Foundation';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import Octicons from 'react-native-vector-icons/Octicons';
import Zocial from 'react-native-vector-icons/Zocial';

export const screenWidth = Dimensions.get('window').width;
export const screenHeight = Dimensions.get('window').height;

const BLACK = '#000000';
const WHITE = '#FFFFFF';

export default class Toolbar extends Component {

    static propTypes = {

        backgroundColor: PropTypes.string,
        borderColor: PropTypes.string,
        shadowColor: PropTypes.string,
        shadowOpacity: PropTypes.number,
        shadowRadius: PropTypes.number,

        toolbarHeight: PropTypes.number,
        toolbarZIndex: PropTypes.number,

        hoverIndent: PropTypes.number,
        hover: PropTypes.bool,

        animate: PropTypes.bool,
        presets: PropTypes.object,
        initialKey: PropTypes.oneOfType([
            React.PropTypes.string,
            React.PropTypes.number,
        ]),

        keyboardType: PropTypes.string,
        autoCapitalize: PropTypes.string,
        returnKeyType: PropTypes.string,
        placeholderTextColor: PropTypes.string,
        inputTextSize: PropTypes.number,
        inputTextColor: PropTypes.string,
    };

    static defaultProps = {

        backgroundColor: WHITE,
        borderColor: null,
        shadowColor: BLACK,
        shadowOpacity: 0.4,
        shadowRadius: 2,

        toolbarHeight: 50,
        toolbarZIndex: 1,

        hoverIndent: 15,
        hover: false,

        animate: true,
        presets: null,
        initialKey: null,

        keyboardType: 'default',
        autoCapitalize: 'none',
        returnKeyType: 'search',
        placeholderTextColor: BLACK,
    };

    constructor(props) {
        super(props);
        this.defaultToolbarContainerStyle = this.defaultToolbarContainerStyle.bind(this);
        this.toolbarContainerStyle = this.toolbarContainerStyle.bind(this);
        this.defaultToolbarStyle = this.defaultToolbarStyle.bind(this);
        this.toolbarStyle = this.toolbarStyle.bind(this);

        this.renderButtonIcon = this.renderButtonIcon.bind(this);
        this.renderButtonTextIcon = this.renderButtonTextIcon.bind(this);
        this.renderIcon = this.renderIcon.bind(this);
        this.renderTitle = this.renderTitle.bind(this);

        this.state = {
            currentKey: props.initialKey,
        }
    }

    setKey = (key) => {
        this.setState({
            currentKey: key,
        });
    };

    componentWillMount() {
        let presets = this.props.presets;
        if (presets) {
            if (!this.props.initialKey) {
                if (!this.state.currentKey) {
                    this.setState({
                        currentKey: Object.keys(presets)[0],
                    });
                }
            }
        }
    }

    defaultToolbarContainerStyle(hover) {
        return this.toolbarContainerStyle(hover, this.props.backgroundColor, this.props.shadowColor, this.props.shadowOpacity, this.props.shadowRadius);
    }

    toolbarContainerStyle(hover, backgroundColor, shadowColor, shadowOpacity, shadowRadius) {
        return {
            position: 'absolute',
            left: 0,
            top: 0,
            zIndex: this.props.toolbarZIndex,
            height: 80,
            width: screenWidth,
            backgroundColor: hover ? 'transparent' : backgroundColor,
            shadowColor: shadowColor,
            shadowOpacity: shadowOpacity,
            shadowRadius: shadowRadius,
            shadowOffset: {
                height: 1,
                width: 0
            }
        };
    }

    defaultToolbarStyle(hover) {
        return this.toolbarStyle(hover, this.props.toolbarHeight, this.props.backgroundColor, this.props.borderColor,);
    }

    toolbarStyle(hover, height, backgroundColor, borderColor,) {
        return {
            position: 'absolute',
            flexDirection: 'row',
            top: 30,
            zIndex: this.props.toolbarZIndex,
            left: this.props.hoverIndent,
            height: height,
            width: hover ? screenWidth - (this.props.hoverIndent * 2) : screenWidth - 30,
            backgroundColor: backgroundColor,
            borderColor: borderColor,

        };
    }

    renderButtonIcon(onPress, icon, iconStyle, iconFontFamily) {
        return (this.renderButtonTextIcon(null, onPress(), null, null, icon, iconStyle, iconFontFamily));
    }

    renderButtonTextIcon(leftRight, onPress, text, textStyle, icon, iconStyle, iconFontFamily) {
        let width = 50;
        if (text) {
            width = 80;
        }
        return (
            <TouchableOpacity onPress={() => onPress()} style={{height: 50, width: width, alignItems: 'center', justifyContent: 'center', flexDirection: 'row',}}>
                {leftRight === 'right' ? text ? <Text style={[{paddingRight: 5,}, textStyle]}>{text}</Text> : null : null}
                {icon ? this.renderIcon(icon, iconStyle, iconFontFamily) : null}
                {leftRight === 'left' ? text ? <Text style={[{paddingLeft: 5,}, textStyle]}>{text}</Text> : null : null}

            </TouchableOpacity>
        );
    }

    renderIcon(icon, iconStyle, iconFontFamily) {
        switch (iconFontFamily) {
            case 'Ionicons':
                return ( <Ionicons style={iconStyle} name={icon}/>);
            case 'Entypo':
                return ( <Entypo style={iconStyle} name={icon}/>);
            case 'FontAwesome':
                return ( <FontAwesome style={iconStyle} name={icon}/>);
            case 'Foundation':
                return ( <Foundation style={iconStyle} name={icon}/>);
            case 'MaterialIcons':
                return ( <MaterialIcons style={iconStyle} name={icon}/>);
            case 'Octicons':
                return ( <Octicons style={iconStyle} name={icon}/>);
            case 'Zocial':
                return ( <Zocial style={iconStyle} name={icon}/>);
            default:
                return ( <FontAwesome style={iconStyle} name={icon}/>);
        }
    }

    renderTitle(onPress, text, textStyle, leftActive, rightActive, centerMinusator) {
        let textStyleMargin = {
            marginLeft: !leftActive ? 50 : 0, marginRight: !rightActive ? 50 : 0,
        };
        let containerStyle = {
            width: screenWidth - centerMinusator,
            height: this.props.toolbarHeight, justifyContent: 'center', alignItems: 'center',
        };

        let renderView =
            <View style={containerStyle}>
                <Text style={[textStyle, textStyleMargin]}>
                    {text}
                </Text>
            </View>;
        if (onPress) {
            renderView =
                <TouchableOpacity style={containerStyle} onPress={() => onPress()}>
                    <Text style={[textStyle, textStyleMargin]}>
                        {text}
                    </Text>
                </TouchableOpacity>;
        }
        return (renderView);
    }


    render() {
        let centerMinusator = this.props.hoverIndent * 2;
        let toolbarContainerStyle = this.defaultToolbarContainerStyle(this.props.hover);
        let toolbarStyle = this.defaultToolbarStyle(this.props.hover);
        let left = null;
        let center = <View style={{height: this.props.toolbarHeight, width: screenWidth - centerMinusator,}}/>;
        let right = null;
        let leftActive = false;
        let rightActive = false;

        let presets = this.props.presets;

        if (presets != null) {
            if (this.state.currentKey) {
                let currentPreset = presets[this.state.currentKey];
                let hover = currentPreset.hover;
                if (hover) {
                    toolbarContainerStyle = this.defaultToolbarContainerStyle(hover);
                    toolbarStyle = this.defaultToolbarStyle(hover);
                }

                if (currentPreset.leftButton) {
                    let lb = presets[this.state.currentKey].leftButton;
                    let onPress = () => {};
                    if (lb.onPress) {
                        onPress = () => lb.onPress();
                    }
                    let text = lb.text;
                    let textStyle = lb.textStyle;
                    let icon = lb.icon;
                    let iconStyle = lb.iconStyle;
                    let iconFontFamily = lb.iconFontFamily;

                    if (icon) {
                        centerMinusator = centerMinusator + 50;
                    }
                    if (text) {
                        centerMinusator = centerMinusator + 30;
                    }

                    if (icon || text) {
                        leftActive = true;
                        left = this.renderButtonTextIcon('left', () => onPress(), text, textStyle, icon, iconStyle, iconFontFamily);
                    }
                    center = <View style={{height: this.props.toolbarHeight, width: screenWidth - centerMinusator,}}/>;
                }

                if (currentPreset.rightButton) {
                    let rb = presets[this.state.currentKey].rightButton;
                    let onPress = () => {};
                    if (rb.onPress) {
                        onPress = () => rb.onPress();
                    }
                    let text = rb.text;
                    let textStyle = rb.textStyle;
                    let icon = rb.icon;
                    let iconStyle = rb.iconStyle;
                    let iconFontFamily = rb.iconFontFamily;

                    if (icon) {
                        centerMinusator = centerMinusator + 50;
                    }
                    if (text) {
                        centerMinusator = centerMinusator + 30;
                    }
                    if (icon || text) {
                        rightActive = true;
                        right = this.renderButtonTextIcon('right', () => onPress(), text, textStyle, icon, iconStyle, iconFontFamily);
                    }
                    center = <View style={{height: this.props.toolbarHeight, width: screenWidth - centerMinusator,}}/>;
                }

                if (currentPreset.title) {
                    let t = currentPreset.title;
                    let text = t.text;
                    let textStyle = t.textStyle;
                    let onPress = null;
                    if (t.onPress) {
                        onPress = () => t.onPress();
                    }
                    center = this.renderTitle(onPress, text, textStyle, leftActive, rightActive, centerMinusator)
                }

                if (currentPreset.search) {
                    let i = currentPreset.search;
                    let placeholderText = i.placeholderText;
                    let placeholderTextColor = i.placeholderTextColor ? i.placeholderTextColor : this.props.placeholderTextColor;
                    let textStyle = i.textStyle;

                    let keyboardType = i.keyboardType ? i.keyboardType : this.props.keyboardType;
                    let autoCapitalize = i.autoCapitalize ? i.autoCapitalize : this.props.autoCapitalize;
                    let returnKeyType = i.returnKeyType ? i.returnKeyType : this.props.returnKeyType;

                    let onTextChanged = () => {};
                    if (i.onTextChanged) {
                        onTextChanged = () => i.onTextChanged();
                    }
                    let onFocus = () => {};
                    if (i.onFocus) {
                        onFocus = () => i.onFocus();
                    }
                    let onSubmit = () => {};
                    if (i.onSubmit) {
                        onSubmit = () => i.onSubmit();
                    }

                    let icon = i.icon;
                    let iconStyle = i.iconStyle;
                    let iconFontFamily = i.iconFontFamily;
                    left = null;
                    center =
                        <View style={{
                            height: this.props.toolbarHeight, width: screenWidth - centerMinusator,
                            justifyContent: 'center', alignItems: 'center', flexDirection: 'row'
                        }}>
                            {icon ? <View style={{height: 50, width: 50, flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}}>
                                    <View style={{height: 50, width: 50-iconStyle.fontSize*2,}}/>
                                    <View style={{height: 50, width: iconStyle.fontSize*2, justifyContent: 'center', alignItems: 'center'}}>
                                        {this.renderIcon(icon, iconStyle, iconFontFamily)}
                                    </View>
                                </View> : null}
                            <TextInput
                                style={[{height: 50, width: screenWidth - centerMinusator - 50,}, textStyle]}
                                autoCapitalize={autoCapitalize} keyboardType={keyboardType}
                                placeholderTextColor={placeholderTextColor} returnKeyType={returnKeyType}
                                onChangeText={(text) => onTextChanged(text)}
                                onFocus={() => onFocus()} placeholder={placeholderText} onSubmitEditing={() => onSubmit()}/>
                        </View>;
                }
            }
        }


        return (
            <View style={toolbarContainerStyle}>
                <View style={toolbarStyle}>
                    {left}
                    {center}
                    {right}
                </View>
            </View>

        );
    }
}